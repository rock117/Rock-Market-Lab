//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "us_basic"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub ts_code: String,
    pub name: Option<String>,
    pub enname: String,
    pub classify: Option<String>,
    pub list_date: Option<String>,
    pub delist_date: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    Name,
    Enname,
    Classify,
    ListDate,
    DelistDate,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(20u32)).def(),
            Self::Name => ColumnType::String(StringLen::N(100u32)).def().null(),
            Self::Enname => ColumnType::String(StringLen::N(100u32)).def(),
            Self::Classify => ColumnType::String(StringLen::N(10u32)).def().null(),
            Self::ListDate => ColumnType::String(StringLen::N(20u32)).def().null(),
            Self::DelistDate => ColumnType::String(StringLen::N(20u32)).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
