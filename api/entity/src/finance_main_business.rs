//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "finance_main_business"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub ts_code: String,
    pub end_date: String,
    pub bz_item: Option<String>,
    pub bz_sales: Option<Decimal>,
    pub bz_profit: Option<Decimal>,
    pub bz_cost: Option<Decimal>,
    pub curr_type: Option<String>,
    pub update_flag: Option<String>,
    pub r#type: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    EndDate,
    BzItem,
    BzSales,
    BzProfit,
    BzCost,
    CurrType,
    UpdateFlag,
    Type,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
    EndDate,
    Type,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(10u32)).def(),
            Self::EndDate => ColumnType::String(StringLen::N(10u32)).def(),
            Self::BzItem => ColumnType::String(StringLen::N(145u32)).def().null(),
            Self::BzSales => ColumnType::Decimal(None).def().null(),
            Self::BzProfit => ColumnType::Decimal(None).def().null(),
            Self::BzCost => ColumnType::Decimal(None).def().null(),
            Self::CurrType => ColumnType::String(StringLen::N(10u32)).def().null(),
            Self::UpdateFlag => ColumnType::String(StringLen::N(5u32)).def().null(),
            Self::Type => ColumnType::String(StringLen::N(1u32)).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
