//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use tushare_api::DeriveFromTushareData;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "stock_holder_number"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, DeriveFromTushareData)]
pub struct Model {
    pub ts_code: String,
    pub ann_date: String,
    pub end_date: String,
    pub holder_num: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    AnnDate,
    EndDate,
    HolderNum,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
    AnnDate,
    EndDate,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(10u32)).def(),
            Self::AnnDate => ColumnType::String(StringLen::N(10u32)).def(),
            Self::EndDate => ColumnType::String(StringLen::N(10u32)).def(),
            Self::HolderNum => ColumnType::Integer.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
