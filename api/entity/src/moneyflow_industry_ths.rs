//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use tushare_api::DeriveFromTushareData;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "moneyflow_industry_ths"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, DeriveFromTushareData)]
pub struct Model {
    pub trade_date: String,
    pub ts_code: String,
    pub industry: Option<String>,
    pub lead_stock: Option<String>,
    pub close: Option<Decimal>,
    pub pct_change: Option<Decimal>,
    pub company_num: Option<i32>,
    pub pct_change_stock: Option<Decimal>,
    pub close_price: Option<Decimal>,
    pub net_buy_amount: Option<Decimal>,
    pub net_sell_amount: Option<Decimal>,
    pub net_amount: Option<Decimal>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TradeDate,
    TsCode,
    Industry,
    LeadStock,
    Close,
    PctChange,
    CompanyNum,
    PctChangeStock,
    ClosePrice,
    NetBuyAmount,
    NetSellAmount,
    NetAmount,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
    TradeDate,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TradeDate => ColumnType::String(StringLen::N(10u32)).def(),
            Self::TsCode => ColumnType::String(StringLen::N(10u32)).def(),
            Self::Industry => ColumnType::String(StringLen::N(65u32)).def().null(),
            Self::LeadStock => ColumnType::String(StringLen::N(45u32)).def().null(),
            Self::Close => ColumnType::Decimal(None).def().null(),
            Self::PctChange => ColumnType::Decimal(None).def().null(),
            Self::CompanyNum => ColumnType::Integer.def().null(),
            Self::PctChangeStock => ColumnType::Decimal(None).def().null(),
            Self::ClosePrice => ColumnType::Decimal(None).def().null(),
            Self::NetBuyAmount => ColumnType::Decimal(None).def().null(),
            Self::NetSellAmount => ColumnType::Decimal(None).def().null(),
            Self::NetAmount => ColumnType::Decimal(None).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
