//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use tushare_api::DeriveFromTushareData;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "stock_monthly"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, DeriveFromTushareData)]
pub struct Model {
    pub ts_code: String,
    pub trade_date: String,
    pub open: Decimal,
    pub high: Decimal,
    pub low: Decimal,
    pub close: Decimal,
    pub pre_close: Option<Decimal>,
    pub change: Option<Decimal>,
    pub pct_chg: Option<Decimal>,
    pub vol: Decimal,
    pub amount: Decimal,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    TradeDate,
    Open,
    High,
    Low,
    Close,
    PreClose,
    Change,
    PctChg,
    Vol,
    Amount,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
    TradeDate,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(10u32)).def(),
            Self::TradeDate => ColumnType::String(StringLen::N(10u32)).def(),
            Self::Open => ColumnType::Decimal(None).def(),
            Self::High => ColumnType::Decimal(None).def(),
            Self::Low => ColumnType::Decimal(None).def(),
            Self::Close => ColumnType::Decimal(None).def(),
            Self::PreClose => ColumnType::Decimal(None).def().null(),
            Self::Change => ColumnType::Decimal(None).def().null(),
            Self::PctChg => ColumnType::Decimal(None).def().null(),
            Self::Vol => ColumnType::Decimal(None).def(),
            Self::Amount => ColumnType::Decimal(None).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
