//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "fund"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub ts_code: String,
    pub name: Option<String>,
    pub management: Option<String>,
    pub custodian: Option<String>,
    pub fund_type: Option<String>,
    pub found_date: Option<String>,
    pub due_date: Option<String>,
    pub list_date: Option<String>,
    pub issue_date: Option<Decimal>,
    pub delist_date: Option<Decimal>,
    pub issue_amount: Option<Decimal>,
    pub m_fee: Option<Decimal>,
    pub c_fee: Option<Decimal>,
    pub duration_year: Option<Decimal>,
    pub p_value: Option<Decimal>,
    pub min_amount: Option<Decimal>,
    pub exp_return: Option<Decimal>,
    pub benchmark: Option<String>,
    pub status: Option<String>,
    pub invest_type: Option<String>,
    pub r#type: Option<String>,
    pub trustee: Option<String>,
    pub purc_startdate: Option<String>,
    pub redm_startdate: Option<String>,
    pub market: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    Name,
    Management,
    Custodian,
    FundType,
    FoundDate,
    DueDate,
    ListDate,
    IssueDate,
    DelistDate,
    IssueAmount,
    MFee,
    CFee,
    DurationYear,
    PValue,
    MinAmount,
    ExpReturn,
    Benchmark,
    Status,
    InvestType,
    Type,
    Trustee,
    PurcStartdate,
    RedmStartdate,
    Market,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(25u32)).def(),
            Self::Name => ColumnType::String(StringLen::N(250u32)).def().null(),
            Self::Management => ColumnType::String(StringLen::N(250u32)).def().null(),
            Self::Custodian => ColumnType::String(StringLen::N(250u32)).def().null(),
            Self::FundType => ColumnType::String(StringLen::N(25u32)).def().null(),
            Self::FoundDate => ColumnType::String(StringLen::N(25u32)).def().null(),
            Self::DueDate => ColumnType::String(StringLen::N(25u32)).def().null(),
            Self::ListDate => ColumnType::String(StringLen::N(25u32)).def().null(),
            Self::IssueDate => ColumnType::Decimal(None).def().null(),
            Self::DelistDate => ColumnType::Decimal(None).def().null(),
            Self::IssueAmount => ColumnType::Decimal(None).def().null(),
            Self::MFee => ColumnType::Decimal(None).def().null(),
            Self::CFee => ColumnType::Decimal(None).def().null(),
            Self::DurationYear => ColumnType::Decimal(None).def().null(),
            Self::PValue => ColumnType::Decimal(None).def().null(),
            Self::MinAmount => ColumnType::Decimal(None).def().null(),
            Self::ExpReturn => ColumnType::Decimal(None).def().null(),
            Self::Benchmark => ColumnType::String(StringLen::N(250u32)).def().null(),
            Self::Status => ColumnType::String(StringLen::N(25u32)).def().null(),
            Self::InvestType => ColumnType::String(StringLen::N(45u32)).def().null(),
            Self::Type => ColumnType::String(StringLen::N(45u32)).def().null(),
            Self::Trustee => ColumnType::String(StringLen::N(150u32)).def().null(),
            Self::PurcStartdate => ColumnType::String(StringLen::N(25u32)).def().null(),
            Self::RedmStartdate => ColumnType::String(StringLen::N(25u32)).def().null(),
            Self::Market => ColumnType::String(StringLen::N(25u32)).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
