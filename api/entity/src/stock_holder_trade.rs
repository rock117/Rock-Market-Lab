//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use tushare_api::DeriveFromTushareData;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "stock_holder_trade"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, DeriveFromTushareData)]
pub struct Model {
    pub ts_code: String,
    pub ann_date: String,
    pub holder_name: String,
    pub holder_type: Option<String>,
    pub in_de: Option<String>,
    pub change_vol: Option<Decimal>,
    pub change_ratio: Option<Decimal>,
    pub after_share: Option<Decimal>,
    pub after_ratio: Option<Decimal>,
    pub avg_price: Option<Decimal>,
    pub total_share: Option<Decimal>,
    pub begin_date: Option<String>,
    pub close_date: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    AnnDate,
    HolderName,
    HolderType,
    InDe,
    ChangeVol,
    ChangeRatio,
    AfterShare,
    AfterRatio,
    AvgPrice,
    TotalShare,
    BeginDate,
    CloseDate,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
    AnnDate,
    HolderName,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(10u32)).def(),
            Self::AnnDate => ColumnType::String(StringLen::N(25u32)).def(),
            Self::HolderName => ColumnType::String(StringLen::N(55u32)).def(),
            Self::HolderType => ColumnType::String(StringLen::N(10u32)).def().null(),
            Self::InDe => ColumnType::String(StringLen::N(10u32)).def().null(),
            Self::ChangeVol => ColumnType::Decimal(None).def().null(),
            Self::ChangeRatio => ColumnType::Decimal(None).def().null(),
            Self::AfterShare => ColumnType::Decimal(None).def().null(),
            Self::AfterRatio => ColumnType::Decimal(None).def().null(),
            Self::AvgPrice => ColumnType::Decimal(None).def().null(),
            Self::TotalShare => ColumnType::Decimal(None).def().null(),
            Self::BeginDate => ColumnType::String(StringLen::N(10u32)).def().null(),
            Self::CloseDate => ColumnType::String(StringLen::N(10u32)).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
