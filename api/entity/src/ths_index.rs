//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "ths_index"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub ts_code: String,
    pub name: Option<String>,
    pub count: Option<i32>,
    pub exchange: String,
    pub list_date: String,
    pub r#type: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    Name,
    Count,
    Exchange,
    ListDate,
    Type,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
    Exchange,
    Type,
    ListDate,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String, i32, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(20u32)).def(),
            Self::Name => ColumnType::String(StringLen::N(100u32)).def().null(),
            Self::Count => ColumnType::Integer.def().null(),
            Self::Exchange => ColumnType::String(StringLen::N(10u32)).def(),
            Self::ListDate => ColumnType::String(StringLen::N(20u32)).def(),
            Self::Type => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
