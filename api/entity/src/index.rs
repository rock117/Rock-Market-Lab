//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "index"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub ts_code: String,
    pub name: Option<String>,
    pub fullname: Option<String>,
    pub market: Option<String>,
    pub publisher: Option<String>,
    pub index_type: Option<String>,
    pub category: Option<String>,
    pub base_date: Option<String>,
    pub base_point: Option<Decimal>,
    pub list_date: Option<String>,
    pub weight_rule: Option<String>,
    pub desc: Option<String>,
    pub exp_date: Option<String>,
    pub name_py: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    Name,
    Fullname,
    Market,
    Publisher,
    IndexType,
    Category,
    BaseDate,
    BasePoint,
    ListDate,
    WeightRule,
    Desc,
    ExpDate,
    NamePy,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(30u32)).def(),
            Self::Name => ColumnType::String(StringLen::N(145u32)).def().null(),
            Self::Fullname => ColumnType::String(StringLen::N(145u32)).def().null(),
            Self::Market => ColumnType::String(StringLen::N(20u32)).def().null(),
            Self::Publisher => ColumnType::String(StringLen::N(145u32)).def().null(),
            Self::IndexType => ColumnType::String(StringLen::N(45u32)).def().null(),
            Self::Category => ColumnType::String(StringLen::N(55u32)).def().null(),
            Self::BaseDate => ColumnType::String(StringLen::N(15u32)).def().null(),
            Self::BasePoint => ColumnType::Decimal(None).def().null(),
            Self::ListDate => ColumnType::String(StringLen::N(10u32)).def().null(),
            Self::WeightRule => ColumnType::String(StringLen::N(45u32)).def().null(),
            Self::Desc => ColumnType::String(StringLen::N(2500u32)).def().null(),
            Self::ExpDate => ColumnType::String(StringLen::N(15u32)).def().null(),
            Self::NamePy => ColumnType::String(StringLen::N(100u32)).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
