//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "ths_member"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub ts_code: String,
    pub con_code: String,
    pub con_name: Option<String>,
    pub weight: Option<Decimal>,
    pub in_date: Option<String>,
    pub out_date: Option<String>,
    pub is_new: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    ConCode,
    ConName,
    Weight,
    InDate,
    OutDate,
    IsNew,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
    ConCode,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(20u32)).def(),
            Self::ConCode => ColumnType::String(StringLen::N(20u32)).def(),
            Self::ConName => ColumnType::String(StringLen::N(100u32)).def().null(),
            Self::Weight => ColumnType::Decimal(None).def().null(),
            Self::InDate => ColumnType::String(StringLen::N(20u32)).def().null(),
            Self::OutDate => ColumnType::String(StringLen::N(20u32)).def().null(),
            Self::IsNew => ColumnType::String(StringLen::N(1u32)).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
