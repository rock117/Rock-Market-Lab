//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "moneyflow"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub ts_code: String,
    pub trade_date: String,
    pub buy_sm_vol: Option<i32>,
    pub buy_sm_amount: Option<Decimal>,
    pub sell_sm_vol: Option<i32>,
    pub sell_sm_amount: Option<Decimal>,
    pub buy_md_vol: Option<i32>,
    pub buy_md_amount: Option<Decimal>,
    pub sell_md_vol: Option<i32>,
    pub sell_md_amount: Option<Decimal>,
    pub buy_lg_vol: Option<i32>,
    pub buy_lg_amount: Option<Decimal>,
    pub sell_lg_vol: Option<i32>,
    pub sell_lg_amount: Option<Decimal>,
    pub buy_elg_vol: Option<i32>,
    pub buy_elg_amount: Option<Decimal>,
    pub sell_elg_vol: Option<i32>,
    pub sell_elg_amount: Option<Decimal>,
    pub net_mf_vol: Option<i32>,
    pub net_mf_amount: Option<Decimal>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    TsCode,
    TradeDate,
    BuySmVol,
    BuySmAmount,
    SellSmVol,
    SellSmAmount,
    BuyMdVol,
    BuyMdAmount,
    SellMdVol,
    SellMdAmount,
    BuyLgVol,
    BuyLgAmount,
    SellLgVol,
    SellLgAmount,
    BuyElgVol,
    BuyElgAmount,
    SellElgVol,
    SellElgAmount,
    NetMfVol,
    NetMfAmount,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    TsCode,
    TradeDate,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::TsCode => ColumnType::String(StringLen::N(10u32)).def(),
            Self::TradeDate => ColumnType::String(StringLen::N(10u32)).def(),
            Self::BuySmVol => ColumnType::Integer.def().null(),
            Self::BuySmAmount => ColumnType::Decimal(None).def().null(),
            Self::SellSmVol => ColumnType::Integer.def().null(),
            Self::SellSmAmount => ColumnType::Decimal(None).def().null(),
            Self::BuyMdVol => ColumnType::Integer.def().null(),
            Self::BuyMdAmount => ColumnType::Decimal(None).def().null(),
            Self::SellMdVol => ColumnType::Integer.def().null(),
            Self::SellMdAmount => ColumnType::Decimal(None).def().null(),
            Self::BuyLgVol => ColumnType::Integer.def().null(),
            Self::BuyLgAmount => ColumnType::Decimal(None).def().null(),
            Self::SellLgVol => ColumnType::Integer.def().null(),
            Self::SellLgAmount => ColumnType::Decimal(None).def().null(),
            Self::BuyElgVol => ColumnType::Integer.def().null(),
            Self::BuyElgAmount => ColumnType::Decimal(None).def().null(),
            Self::SellElgVol => ColumnType::Integer.def().null(),
            Self::SellElgAmount => ColumnType::Decimal(None).def().null(),
            Self::NetMfVol => ColumnType::Integer.def().null(),
            Self::NetMfAmount => ColumnType::Decimal(None).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
